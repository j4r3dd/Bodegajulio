{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(source:*)",
      "Bash(ls:*)",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\ntry:\n    from src.modules.receipts.components.pdf_generator import PDFGenerator\n    print(''PDFGenerator imported successfully'')\n    pdf_gen = PDFGenerator()\n    print(''PDFGenerator instance created successfully'')\nexcept Exception as e:\n    print(''Error:'', e)\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\ntry:\n    from src.modules.receipts.components.pdf_generator import PDFGenerator\n    from datetime import datetime\n    \n    # Test creating a PDF\n    pdf_gen = PDFGenerator()\n    \n    # Simple test data\n    test_data = [\n        (''Test Product'', 1.0, ''unit'', 10.0, 10.0)\n    ]\n    \n    filename = pdf_gen.create_pdf_from_products(''test_client'', test_data, 10.0)\n    print(''PDF created successfully:'', filename)\n    \nexcept Exception as e:\n    print(''Error during PDF creation:'', e)\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom src.modules.receipts.components.pdf_generator import PDF\nimport os\n\n# Check the current working directory and font path\nprint(''Current working directory:'', os.getcwd())\nfile_path = os.path.abspath(__file__)\nprint(''Test file path:'', file_path)\n\n# Let''s examine the font paths that are being set\npdf = PDF()\nprint(''PDF instance created successfully'')\n\n# Let''s check what fonts are registered\nif hasattr(pdf, ''fonts''):\n    print(''Fonts registered:'', pdf.fonts.keys())\n    for font_name, font_data in pdf.fonts.items():\n        print(f''Font: {font_name}'')\n        if hasattr(font_data, ''fontkey''):\n            print(f''  Font key: {font_data.fontkey}'')\n        if hasattr(font_data, ''i''):\n            print(f''  Font i: {font_data.i}'')\n        if isinstance(font_data, dict):\n            print(f''  Font data: {font_data}'')\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom src.modules.receipts.components.pdf_generator import PDF\nimport os\n\n# Check the current working directory and font path\nprint(''Current working directory:'', os.getcwd())\n\n# Let''s examine the font paths that are being set\npdf = PDF()\nprint(''PDF instance created successfully'')\n\n# Let''s check what fonts are registered\nif hasattr(pdf, ''fonts''):\n    print(''Fonts registered:'', list(pdf.fonts.keys()))\n    for font_name, font_data in pdf.fonts.items():\n        print(f''Font: {font_name}'')\n        if isinstance(font_data, dict):\n            for key, value in font_data.items():\n                if ''ttf'' in key.lower() or ''file'' in key.lower():\n                    print(f''  {key}: {value}'')\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nimport os\n\n# Let''s check the font registration process\nprint(''Current working directory:'', os.getcwd())\n\n# Check if the font paths exist\nbase_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(''src/modules/receipts/components/pdf_generator.py''))))))\nfont_path = os.path.join(base_path, ''data'', ''fonts'')\nprint(''Base path:'', base_path)\nprint(''Font path:'', font_path)\nprint(''Font path exists:'', os.path.exists(font_path))\nprint(''DejaVuSans.ttf exists:'', os.path.exists(os.path.join(font_path, ''DejaVuSans.ttf'')))\nprint(''DejaVuSans-Bold.ttf exists:'', os.path.exists(os.path.join(font_path, ''DejaVuSans-Bold.ttf'')))\nprint(''Font files in directory:'', os.listdir(font_path))\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nfrom src.modules.receipts.components.pdf_generator import PDF\nimport os\n\n# Create a PDF instance and check the font registration\npdf = PDF()\nprint(''PDF instance created'')\n\n# Check the font file paths stored in the PDF instance\nfor font_name, font_data in pdf.fonts.items():\n    print(f''Font: {font_name}'')\n    ttffile = font_data.get(''ttffile'')\n    print(f''  ttffile stored: {ttffile}'')\n    print(f''  ttffile exists: {os.path.exists(ttffile)}'')\n    \n    # Check if it''s trying to look for it in the wrong place\n    wrong_path = os.path.join(os.getcwd(), ttffile)\n    print(f''  wrong path check: {wrong_path}'')\n    print(f''  wrong path exists: {os.path.exists(wrong_path)}'')\n    print()\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nimport os\nfrom fpdf import FPDF\n\n# Let''s create a debug version of the PDF class to see what''s happening\nclass DebugPDF(FPDF):\n    def __init__(self):\n        super().__init__()\n        \n        # Get the paths just like in the original code\n        base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(''src/modules/receipts/components/pdf_generator.py''))))))\n        font_path = os.path.join(base_path, ''data'', ''fonts'')\n        \n        print(f''Base path: {base_path}'')\n        print(f''Font path: {font_path}'')\n        \n        # Check the full paths\n        dejavu_path = os.path.join(font_path, ''DejaVuSans.ttf'')\n        dejavu_bold_path = os.path.join(font_path, ''DejaVuSans-Bold.ttf'')\n        \n        print(f''DejaVu path: {dejavu_path}'')\n        print(f''DejaVu path exists: {os.path.exists(dejavu_path)}'')\n        print(f''DejaVu Bold path: {dejavu_bold_path}'')\n        print(f''DejaVu Bold path exists: {os.path.exists(dejavu_bold_path)}'')\n        \n        # Try to add fonts and see what happens\n        print(''Adding DejaVu font...'')\n        self.add_font(''DejaVu'', '''', dejavu_path, uni=True)\n        print(''Adding DejaVu Bold font...'')\n        self.add_font(''DejaVu'', ''B'', dejavu_bold_path, uni=True)\n        \n        # Check what was actually stored\n        print(''Checking stored font data...'')\n        for font_name, font_data in self.fonts.items():\n            print(f''Font: {font_name}'')\n            ttffile = font_data.get(''ttffile'')\n            print(f''  ttffile stored: {ttffile}'')\n\n# Test the debug version\npdf = DebugPDF()\n\")",
      "Bash(/mnt/c/Users/j4r3d/Programacion/Dashboard-bodega/venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, ''.'')\nimport os\nimport pickle\n\n# Check the .pkl files in the fonts directory\nfont_dir = ''data/fonts''\npkl_files = [f for f in os.listdir(font_dir) if f.endswith(''.pkl'')]\nprint(''PKL files found:'', pkl_files)\n\nfor pkl_file in pkl_files:\n    pkl_path = os.path.join(font_dir, pkl_file)\n    print(f''\\nChecking {pkl_file}:'')\n    try:\n        with open(pkl_path, ''rb'') as f:\n            font_data = pickle.load(f)\n            if isinstance(font_data, dict):\n                ttffile = font_data.get(''ttffile'')\n                if ttffile:\n                    print(f''  ttffile in cache: {ttffile}'')\n                    print(f''  ttffile exists: {os.path.exists(ttffile)}'')\n    except Exception as e:\n        print(f''  Error reading: {e}'')\n\")",
      "Bash(rm:*)"
    ],
    "deny": []
  }
}